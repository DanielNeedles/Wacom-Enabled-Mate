# Makefile.in generated by automake 1.13.4 from Makefile.am.
# plugins/wacom/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/mate-settings-daemon
pkgincludedir = $(includedir)/mate-settings-daemon
pkglibdir = $(libdir)/mate-settings-daemon
pkglibexecdir = $(libexecdir)/mate-settings-daemon
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
libexec_PROGRAMS = gsd-test-wacom$(EXEEXT) gsd-list-wacom$(EXEEXT) \
	gsd-test-wacom-osd$(EXEEXT)
subdir = plugins/wacom
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/depcomp
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/intltool.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" \
	"$(DESTDIR)$(plugindir)" "$(DESTDIR)$(polkit_policydir)"
LTLIBRARIES = $(plugin_LTLIBRARIES)
am__DEPENDENCIES_1 =
libgsdwacom_la_DEPENDENCIES =  \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1)
am_libgsdwacom_la_OBJECTS = libgsdwacom_la-gsd-wacom-plugin.lo \
	libgsdwacom_la-gsd-wacom-manager.lo \
	libgsdwacom_la-gsd-wacom-key-shortcut-button.lo \
	libgsdwacom_la-gsd-wacom-button-editor.lo \
	libgsdwacom_la-gsd-wacom-osd-window.lo \
	libgsdwacom_la-gsd-wacom-oled.lo \
	libgsdwacom_la-gsd-wacom-device.lo \
	libgsdwacom_la-gsd-wacom-resources.lo
libgsdwacom_la_OBJECTS = $(am_libgsdwacom_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
libgsdwacom_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(libgsdwacom_la_CFLAGS) $(CFLAGS) $(libgsdwacom_la_LDFLAGS) \
	$(LDFLAGS) -o $@
PROGRAMS = $(libexec_PROGRAMS)
am_gsd_list_wacom_OBJECTS = gsd_list_wacom-list-wacom.$(OBJEXT) \
	gsd_list_wacom-gsd-wacom-device.$(OBJEXT)
gsd_list_wacom_OBJECTS = $(am_gsd_list_wacom_OBJECTS)
gsd_list_wacom_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
gsd_list_wacom_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_list_wacom_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
am_gsd_test_wacom_OBJECTS = gsd_test_wacom-test-wacom.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-manager.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-key-shortcut-button.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-button-editor.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-osd-window.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-oled.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-device.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-resources.$(OBJEXT)
gsd_test_wacom_OBJECTS = $(am_gsd_test_wacom_OBJECTS)
gsd_test_wacom_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
gsd_test_wacom_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_test_wacom_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
am_gsd_test_wacom_osd_OBJECTS =  \
	gsd_test_wacom_osd-test-osd-window.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-button-editor.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-osd-window.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-device.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-resources.$(OBJEXT)
gsd_test_wacom_osd_OBJECTS = $(am_gsd_test_wacom_osd_OBJECTS)
gsd_test_wacom_osd_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
gsd_test_wacom_osd_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libgsdwacom_la_SOURCES) $(gsd_list_wacom_SOURCES) \
	$(gsd_test_wacom_SOURCES) $(gsd_test_wacom_osd_SOURCES)
DIST_SOURCES = $(libgsdwacom_la_SOURCES) $(gsd_list_wacom_SOURCES) \
	$(gsd_test_wacom_SOURCES) $(gsd_test_wacom_osd_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(plugin_DATA) $(polkit_policy_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/missing aclocal-1.13
ALL_LINGUAS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
AUTOCONF = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/missing autoconf
AUTOHEADER = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/missing autoheader
AUTOMAKE = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/missing automake-1.13
AWK = gawk
CATALOGS = 
CATOBJEXT = .gmo
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I${prefix}/include  -I${prefix}/include 
CXX = g++
CXXCPP = 
CXXDEPMODE = depmode=none
CXXFLAGS = 
CYGPATH_W = echo
DATADIRNAME = share
DBUS_SYS_DIR = ${sysconfdir}/dbus-1/system.d
DCONF_CFLAGS = -pthread -I/usr/include/dconf -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
DCONF_LIBS = -ldconf -lgio-2.0 -lgobject-2.0 -lglib-2.0  
DEBUG_CFLAGS = -DG_ENABLE_DEBUG
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
FONTCONFIG_CFLAGS = -I/usr/include/freetype2  
FONTCONFIG_LIBS = -lfontconfig -lfreetype  
GETTEXT_PACKAGE = mate-settings-daemon
GIOUNIX_CFLAGS = -pthread -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
GIOUNIX_LIBS = -lgio-2.0 -lgobject-2.0 -lglib-2.0  
GLIB_COMPILE_SCHEMAS = glib-compile-schemas
GLIB_GENMARSHAL = /usr/bin/glib-genmarshal
GMOFILES = 
GMSGFMT = /usr/bin/msgfmt
GREP = /usr/bin/grep
GSETTINGS_DISABLE_SCHEMAS_COMPILE = 
GTK_API_VERSION = 2.0
HAVE_WACOM_CFLAGS = 
HAVE_WACOM_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_EXTRACT = /usr/bin/intltool-extract
INTLTOOL_MERGE = /usr/bin/intltool-merge
INTLTOOL_PERL = /usr/bin/perl
INTLTOOL_UPDATE = /usr/bin/intltool-update
INTLTOOL_V_MERGE = $(INTLTOOL__v_MERGE_$(V))
INTLTOOL_V_MERGE_OPTIONS = $(intltool__v_merge_options_$(V))
INTLTOOL__v_MERGE_ = $(INTLTOOL__v_MERGE_$(AM_DEFAULT_VERBOSITY))
INTLTOOL__v_MERGE_0 = @echo "  ITMRG " $@;
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBCANBERRA_CFLAGS = -D_REENTRANT -pthread -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng15 -I/usr/include/libdrm -I/usr/include/atk-1.0 -I/usr/include/harfbuzz  
LIBCANBERRA_LIBS = -lcanberra-gtk -lX11 -lcanberra -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype  
LIBEXECDIR = /usr/libexec
LIBMATEKBDUI_CFLAGS = -pthread -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pango-1.0 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng15 -I/usr/include/libdrm -I/usr/include/libxml2  
LIBMATEKBDUI_LIBS = -Wl,--export-dynamic -pthread -lmatekbdui -lmatekbd -lgmodule-2.0 -lgdk-x11-2.0 -lgio-2.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lpango-1.0 -lcairo -lgobject-2.0 -lglib-2.0 -lxklavier  
LIBMATEMIXER_CFLAGS = -pthread -I/usr/include/mate-mixer -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
LIBMATEMIXER_LIBS = -Wl,--export-dynamic -pthread -lmatemixer -lgobject-2.0 -lgmodule-2.0 -lglib-2.0  
LIBNOTIFY_CFLAGS = -pthread -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/libpng15  
LIBNOTIFY_LIBS = -lnotify -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0  
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBWACOM_CFLAGS = -I/usr/include/libwacom-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
LIBWACOM_LIBS = -lwacom  
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAKEINFO = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/missing makeinfo
MANIFEST_TOOL = :
MATE_DESKTOP_CFLAGS = -pthread -I/usr/include/mate-desktop-2.0 -I/usr/include/dconf -I/usr/include/gtk-2.0 -I/usr/include/startup-notification-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/lib64/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng15 -I/usr/include/libdrm -I/usr/include/harfbuzz  
MATE_DESKTOP_LIBS = -lmate-desktop-2 -lgtk-x11-2.0 -lstartup-notification-1 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype  
MATE_KEYBINDINGS_KEYSDIR = ${datarootdir}/mate-control-center/keybindings
MKDIR_P = /usr/bin/mkdir -p
MKINSTALLDIRS = ./mkinstalldirs
MSD_INTLTOOL_PLUGIN_RULE = %.mate-settings-plugin:   %.mate-settings-plugin.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
MSD_PLUGIN_LDFLAGS = -export_dynamic -module -avoid-version -no-undefined
MSGFMT = /usr/bin/msgfmt
MSGFMT_OPTS = -c
MSGMERGE = /usr/bin/msgmerge
NM = /usr/bin/nm -B
NMEDIT = 
NSS_CFLAGS = -I/usr/include/nss3 -I/usr/include/nspr4  
NSS_DATABASE = ${prefix}/etc/pki/nssdb
NSS_LIBS = -lssl3 -lsmime3 -lnss3 -lnssutil3 -lplds4 -lplc4 -lnspr4 -lpthread -ldl  
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = mate-settings-daemon
PACKAGE_BUGREPORT = http://www.mate-desktop.org/
PACKAGE_NAME = mate-settings-daemon
PACKAGE_STRING = mate-settings-daemon 1.16.0
PACKAGE_TARNAME = mate-settings-daemon
PACKAGE_URL = 
PACKAGE_VERSION = 1.16.0
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = /usr/local/lib/pkgconfig/:/usr/local/share/pkgconfig/:/usr/lib/pkgconfig
POFILES = 
POLKIT_CFLAGS = -pthread -I/usr/include/polkit-1 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/dbus-1.0 -I/usr/lib64/dbus-1.0/include  
POLKIT_LIBS = -L/lib64 -lpolkit-gobject-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -ldbus-1  
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
PULSE_CFLAGS = 
PULSE_LIBS = 
RANLIB = ranlib
SED = /usr/bin/sed
SETTINGS_DAEMON_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng15 -I/usr/include/libdrm -I/usr/include/harfbuzz -I/usr/include/dbus-1.0 -I/usr/lib64/dbus-1.0/include  
SETTINGS_DAEMON_LIBS = -Wl,--export-dynamic -pthread -L/lib64 -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lfreetype -lgio-2.0 -lgmodule-2.0 -lgthread-2.0 -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lglib-2.0  
SETTINGS_PLUGIN_CFLAGS = -pthread -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng15 -I/usr/include/libdrm -I/usr/include/harfbuzz -I/usr/include/dbus-1.0 -I/usr/lib64/dbus-1.0/include  
SETTINGS_PLUGIN_LIBS = -L/lib64 -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lfreetype -lgio-2.0 -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lglib-2.0  
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_NLS = yes
VERSION = 1.16.0
WARN_CFLAGS = -Wall -Wmissing-prototypes 
X11_LIBS =   -lSM -lICE -lXext -lX11 
XF86MISC_LIBS = -lXxf86misc
XGETTEXT = /usr/bin/xgettext
XINPUT_LIBS = -lXi
XMKMF = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/plugins/wacom
abs_srcdir = /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/plugins/wacom
abs_top_builddir = /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0
abs_top_srcdir = /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gsettingsschemadir = ${datarootdir}/glib-2.0/schemas
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/dneedles/PROJECT2/CODE/mate-settings-daemon-1.16.0/install-sh
intltool__v_merge_options_ = $(intltool__v_merge_options_$(AM_DEFAULT_VERBOSITY))
intltool__v_merge_options_0 = -q
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
plugindir = $(libdir)/mate-settings-daemon
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
plugin_name = wacom
plugin_LTLIBRARIES = libgsdwacom.la
libgsdwacom_la_SOURCES = \
	gsd-wacom-plugin.c	\
	gsd-wacom-manager.h	\
	gsd-wacom-manager.c	\
	gsd-wacom-key-shortcut-button.h	\
	gsd-wacom-key-shortcut-button.c	\
	gsd-wacom-button-editor.h	\
	gsd-wacom-button-editor.c	\
	gsd-wacom-osd-window.h	\
	gsd-wacom-osd-window.c	\
	gsd-wacom-oled.h	\
	gsd-wacom-oled.c	\
	gsd-wacom-oled-constants.h \
	gsd-wacom-device.c	\
	gsd-wacom-device.h	\
	gsd-wacom-resources.c

libgsdwacom_la_CPPFLAGS = \
	-I$(top_srcdir)/gnome-settings-daemon		\
	-I$(top_builddir)/gnome-settings-daemon		\
	-I$(top_srcdir)/plugins/common/			\
	-I$(top_srcdir)/data/				\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\" \
	-DLIBEXECDIR=\""$(libexecdir)"\" 		\
	$(AM_CPPFLAGS)

libgsdwacom_la_CFLAGS = \
	$(PLUGIN_CFLAGS)		\
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

libgsdwacom_la_LDFLAGS = \
	$(GSD_PLUGIN_LDFLAGS)

libgsdwacom_la_LIBADD = \
	$(top_builddir)/plugins/common/libcommon.la			\
	$(SETTINGS_PLUGIN_LIBS)						\
	$(WACOM_LIBS)

polkit_policydir = $(datadir)/polkit-1/actions
polkit_policy_in_files = org.gnome.settings-daemon.plugins.wacom.policy.in
polkit_policy_DATA = $(polkit_policy_in_files:.policy.in=.policy)

# so it always gets included in the tarball
gsd_wacom_led_helper_SOURCES = gsd-wacom-led-helper.c
gsd_wacom_oled_helper_SOURCES = gsd-wacom-oled-helper.c gsd-wacom-oled-constants.h
# endif
EXTRA_DIST = $(gsd_wacom_led_helper_SOURCES) wacom.gresource.xml \
	tablet-layout.css $(gsd_wacom_oled_helper_SOURCES) \
	org.gnome.settings-daemon.plugins.wacom.policy.in.in \
	$(plugin_in_files) README.config-storage
gsd_test_wacom_SOURCES = \
	test-wacom.c		\
	gsd-wacom-manager.c	\
	gsd-wacom-manager.h	\
	gsd-wacom-key-shortcut-button.h	\
	gsd-wacom-key-shortcut-button.c	\
	gsd-wacom-button-editor.h	\
	gsd-wacom-button-editor.c	\
	gsd-wacom-osd-window.h	\
	gsd-wacom-osd-window.c	\
	gsd-wacom-oled.h	\
	gsd-wacom-oled.c	\
	gsd-wacom-device.c	\
	gsd-wacom-device.h	\
	gsd-wacom-resources.c

gsd_test_wacom_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon		\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	-DLIBEXECDIR=\""$(libexecdir)"\"			\
	-DSCHEMA_NAME=\""gsdwacom"\"				\
	$(AM_CPPFLAGS)

gsd_test_wacom_CFLAGS = \
	$(PLUGIN_CFLAGS)		\
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

gsd_test_wacom_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

gsd_list_wacom_SOURCES = \
	list-wacom.c		\
	gsd-wacom-device.c	\
	gsd-wacom-device.h

gsd_list_wacom_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon			\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	$(AM_CPPFLAGS)

gsd_list_wacom_CFLAGS = \
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

gsd_list_wacom_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

gsd_test_wacom_osd_SOURCES = \
	test-osd-window.c					\
	gsd-wacom-key-shortcut-button.h				\
	gsd-wacom-key-shortcut-button.c				\
	gsd-wacom-button-editor.h				\
	gsd-wacom-button-editor.c				\
	gsd-wacom-osd-window.h					\
	gsd-wacom-osd-window.c					\
	gsd-wacom-device.c					\
	gsd-wacom-device.h					\
	gsd-wacom-resources.c

gsd_test_wacom_osd_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon			\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	-DLIBEXECDIR=\""$(libexecdir)"\"			\
	$(AM_CPPFLAGS)

gsd_test_wacom_osd_CFLAGS = \
	$(SETTINGS_PLUGIN_CFLAGS)				\
	$(WACOM_CFLAGS)						\
	$(AM_CFLAGS)

gsd_test_wacom_osd_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

plugin_in_files = wacom.gnome-settings-plugin.in
plugin_DATA = $(plugin_in_files:.gnome-settings-plugin.in=.gnome-settings-plugin)
CLEANFILES = \
	$(plugin_DATA)					\
	gsd-wacom-resources.c				\
	org.gnome.settings-daemon.plugins.wacom.policy	\
	org.gnome.settings-daemon.plugins.wacom.policy.in

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu plugins/wacom/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu plugins/wacom/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

install-pluginLTLIBRARIES: $(plugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(plugin_LTLIBRARIES)'; test -n "$(plugindir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(plugindir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(plugindir)"; \
	}

uninstall-pluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(plugin_LTLIBRARIES)'; test -n "$(plugindir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(plugindir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(plugindir)/$$f"; \
	done

clean-pluginLTLIBRARIES:
	-test -z "$(plugin_LTLIBRARIES)" || rm -f $(plugin_LTLIBRARIES)
	@list='$(plugin_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libgsdwacom.la: $(libgsdwacom_la_OBJECTS) $(libgsdwacom_la_DEPENDENCIES) $(EXTRA_libgsdwacom_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(libgsdwacom_la_LINK) -rpath $(plugindir) $(libgsdwacom_la_OBJECTS) $(libgsdwacom_la_LIBADD) $(LIBS)
install-libexecPROGRAMS: $(libexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libexecdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libexecdir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(libexecdir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(libexecdir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-libexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libexecdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libexecdir)" && rm -f $$files

clean-libexecPROGRAMS:
	@list='$(libexec_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

gsd-list-wacom$(EXEEXT): $(gsd_list_wacom_OBJECTS) $(gsd_list_wacom_DEPENDENCIES) $(EXTRA_gsd_list_wacom_DEPENDENCIES) 
	@rm -f gsd-list-wacom$(EXEEXT)
	$(AM_V_CCLD)$(gsd_list_wacom_LINK) $(gsd_list_wacom_OBJECTS) $(gsd_list_wacom_LDADD) $(LIBS)

gsd-test-wacom$(EXEEXT): $(gsd_test_wacom_OBJECTS) $(gsd_test_wacom_DEPENDENCIES) $(EXTRA_gsd_test_wacom_DEPENDENCIES) 
	@rm -f gsd-test-wacom$(EXEEXT)
	$(AM_V_CCLD)$(gsd_test_wacom_LINK) $(gsd_test_wacom_OBJECTS) $(gsd_test_wacom_LDADD) $(LIBS)

gsd-test-wacom-osd$(EXEEXT): $(gsd_test_wacom_osd_OBJECTS) $(gsd_test_wacom_osd_DEPENDENCIES) $(EXTRA_gsd_test_wacom_osd_DEPENDENCIES) 
	@rm -f gsd-test-wacom-osd$(EXEEXT)
	$(AM_V_CCLD)$(gsd_test_wacom_osd_LINK) $(gsd_test_wacom_osd_OBJECTS) $(gsd_test_wacom_osd_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po
include ./$(DEPDIR)/gsd_list_wacom-list-wacom.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po
include ./$(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po
include ./$(DEPDIR)/gsd_test_wacom-test-wacom.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po
include ./$(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Plo
include ./$(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Plo

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

libgsdwacom_la-gsd-wacom-plugin.lo: gsd-wacom-plugin.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-plugin.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Tpo -c -o libgsdwacom_la-gsd-wacom-plugin.lo `test -f 'gsd-wacom-plugin.c' || echo '$(srcdir)/'`gsd-wacom-plugin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Plo
#	$(AM_V_CC)source='gsd-wacom-plugin.c' object='libgsdwacom_la-gsd-wacom-plugin.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-plugin.lo `test -f 'gsd-wacom-plugin.c' || echo '$(srcdir)/'`gsd-wacom-plugin.c

libgsdwacom_la-gsd-wacom-manager.lo: gsd-wacom-manager.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-manager.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Tpo -c -o libgsdwacom_la-gsd-wacom-manager.lo `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Plo
#	$(AM_V_CC)source='gsd-wacom-manager.c' object='libgsdwacom_la-gsd-wacom-manager.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-manager.lo `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c

libgsdwacom_la-gsd-wacom-key-shortcut-button.lo: gsd-wacom-key-shortcut-button.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-key-shortcut-button.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Tpo -c -o libgsdwacom_la-gsd-wacom-key-shortcut-button.lo `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Plo
#	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='libgsdwacom_la-gsd-wacom-key-shortcut-button.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-key-shortcut-button.lo `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

libgsdwacom_la-gsd-wacom-button-editor.lo: gsd-wacom-button-editor.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-button-editor.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Tpo -c -o libgsdwacom_la-gsd-wacom-button-editor.lo `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Plo
#	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='libgsdwacom_la-gsd-wacom-button-editor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-button-editor.lo `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

libgsdwacom_la-gsd-wacom-osd-window.lo: gsd-wacom-osd-window.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-osd-window.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Tpo -c -o libgsdwacom_la-gsd-wacom-osd-window.lo `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Plo
#	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='libgsdwacom_la-gsd-wacom-osd-window.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-osd-window.lo `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

libgsdwacom_la-gsd-wacom-oled.lo: gsd-wacom-oled.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-oled.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Tpo -c -o libgsdwacom_la-gsd-wacom-oled.lo `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Plo
#	$(AM_V_CC)source='gsd-wacom-oled.c' object='libgsdwacom_la-gsd-wacom-oled.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-oled.lo `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c

libgsdwacom_la-gsd-wacom-device.lo: gsd-wacom-device.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-device.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Tpo -c -o libgsdwacom_la-gsd-wacom-device.lo `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Plo
#	$(AM_V_CC)source='gsd-wacom-device.c' object='libgsdwacom_la-gsd-wacom-device.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-device.lo `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

libgsdwacom_la-gsd-wacom-resources.lo: gsd-wacom-resources.c
	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-resources.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Tpo -c -o libgsdwacom_la-gsd-wacom-resources.lo `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Plo
#	$(AM_V_CC)source='gsd-wacom-resources.c' object='libgsdwacom_la-gsd-wacom-resources.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-resources.lo `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_list_wacom-list-wacom.o: list-wacom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-list-wacom.o -MD -MP -MF $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo -c -o gsd_list_wacom-list-wacom.o `test -f 'list-wacom.c' || echo '$(srcdir)/'`list-wacom.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo $(DEPDIR)/gsd_list_wacom-list-wacom.Po
#	$(AM_V_CC)source='list-wacom.c' object='gsd_list_wacom-list-wacom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-list-wacom.o `test -f 'list-wacom.c' || echo '$(srcdir)/'`list-wacom.c

gsd_list_wacom-list-wacom.obj: list-wacom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-list-wacom.obj -MD -MP -MF $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo -c -o gsd_list_wacom-list-wacom.obj `if test -f 'list-wacom.c'; then $(CYGPATH_W) 'list-wacom.c'; else $(CYGPATH_W) '$(srcdir)/list-wacom.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo $(DEPDIR)/gsd_list_wacom-list-wacom.Po
#	$(AM_V_CC)source='list-wacom.c' object='gsd_list_wacom-list-wacom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-list-wacom.obj `if test -f 'list-wacom.c'; then $(CYGPATH_W) 'list-wacom.c'; else $(CYGPATH_W) '$(srcdir)/list-wacom.c'; fi`

gsd_list_wacom-gsd-wacom-device.o: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo -c -o gsd_list_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_list_wacom-gsd-wacom-device.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_list_wacom-gsd-wacom-device.obj: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo -c -o gsd_list_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_list_wacom-gsd-wacom-device.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom-test-wacom.o: test-wacom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-test-wacom.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo -c -o gsd_test_wacom-test-wacom.o `test -f 'test-wacom.c' || echo '$(srcdir)/'`test-wacom.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo $(DEPDIR)/gsd_test_wacom-test-wacom.Po
#	$(AM_V_CC)source='test-wacom.c' object='gsd_test_wacom-test-wacom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-test-wacom.o `test -f 'test-wacom.c' || echo '$(srcdir)/'`test-wacom.c

gsd_test_wacom-test-wacom.obj: test-wacom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-test-wacom.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo -c -o gsd_test_wacom-test-wacom.obj `if test -f 'test-wacom.c'; then $(CYGPATH_W) 'test-wacom.c'; else $(CYGPATH_W) '$(srcdir)/test-wacom.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo $(DEPDIR)/gsd_test_wacom-test-wacom.Po
#	$(AM_V_CC)source='test-wacom.c' object='gsd_test_wacom-test-wacom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-test-wacom.obj `if test -f 'test-wacom.c'; then $(CYGPATH_W) 'test-wacom.c'; else $(CYGPATH_W) '$(srcdir)/test-wacom.c'; fi`

gsd_test_wacom-gsd-wacom-manager.o: gsd-wacom-manager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-manager.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo -c -o gsd_test_wacom-gsd-wacom-manager.o `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po
#	$(AM_V_CC)source='gsd-wacom-manager.c' object='gsd_test_wacom-gsd-wacom-manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-manager.o `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c

gsd_test_wacom-gsd-wacom-manager.obj: gsd-wacom-manager.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-manager.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo -c -o gsd_test_wacom-gsd-wacom-manager.obj `if test -f 'gsd-wacom-manager.c'; then $(CYGPATH_W) 'gsd-wacom-manager.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-manager.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po
#	$(AM_V_CC)source='gsd-wacom-manager.c' object='gsd_test_wacom-gsd-wacom-manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-manager.obj `if test -f 'gsd-wacom-manager.c'; then $(CYGPATH_W) 'gsd-wacom-manager.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-manager.c'; fi`

gsd_test_wacom-gsd-wacom-key-shortcut-button.o: gsd-wacom-key-shortcut-button.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-key-shortcut-button.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po
#	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom-gsd-wacom-key-shortcut-button.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

gsd_test_wacom-gsd-wacom-key-shortcut-button.obj: gsd-wacom-key-shortcut-button.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-key-shortcut-button.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po
#	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom-gsd-wacom-key-shortcut-button.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`

gsd_test_wacom-gsd-wacom-button-editor.o: gsd-wacom-button-editor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-button-editor.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po
#	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom-gsd-wacom-button-editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

gsd_test_wacom-gsd-wacom-button-editor.obj: gsd-wacom-button-editor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-button-editor.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po
#	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom-gsd-wacom-button-editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`

gsd_test_wacom-gsd-wacom-osd-window.o: gsd-wacom-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po
#	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom-gsd-wacom-osd-window.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

gsd_test_wacom-gsd-wacom-osd-window.obj: gsd-wacom-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po
#	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom-gsd-wacom-osd-window.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`

gsd_test_wacom-gsd-wacom-oled.o: gsd-wacom-oled.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-oled.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo -c -o gsd_test_wacom-gsd-wacom-oled.o `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po
#	$(AM_V_CC)source='gsd-wacom-oled.c' object='gsd_test_wacom-gsd-wacom-oled.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-oled.o `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c

gsd_test_wacom-gsd-wacom-oled.obj: gsd-wacom-oled.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-oled.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo -c -o gsd_test_wacom-gsd-wacom-oled.obj `if test -f 'gsd-wacom-oled.c'; then $(CYGPATH_W) 'gsd-wacom-oled.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po
#	$(AM_V_CC)source='gsd-wacom-oled.c' object='gsd_test_wacom-gsd-wacom-oled.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-oled.obj `if test -f 'gsd-wacom-oled.c'; then $(CYGPATH_W) 'gsd-wacom-oled.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled.c'; fi`

gsd_test_wacom-gsd-wacom-device.o: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo -c -o gsd_test_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom-gsd-wacom-device.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_test_wacom-gsd-wacom-device.obj: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo -c -o gsd_test_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom-gsd-wacom-device.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom-gsd-wacom-resources.o: gsd-wacom-resources.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-resources.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo -c -o gsd_test_wacom-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po
#	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom-gsd-wacom-resources.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_test_wacom-gsd-wacom-resources.obj: gsd-wacom-resources.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-resources.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo -c -o gsd_test_wacom-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po
#	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom-gsd-wacom-resources.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`

gsd_test_wacom_osd-test-osd-window.o: test-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-test-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo -c -o gsd_test_wacom_osd-test-osd-window.o `test -f 'test-osd-window.c' || echo '$(srcdir)/'`test-osd-window.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po
#	$(AM_V_CC)source='test-osd-window.c' object='gsd_test_wacom_osd-test-osd-window.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-test-osd-window.o `test -f 'test-osd-window.c' || echo '$(srcdir)/'`test-osd-window.c

gsd_test_wacom_osd-test-osd-window.obj: test-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-test-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo -c -o gsd_test_wacom_osd-test-osd-window.obj `if test -f 'test-osd-window.c'; then $(CYGPATH_W) 'test-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/test-osd-window.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po
#	$(AM_V_CC)source='test-osd-window.c' object='gsd_test_wacom_osd-test-osd-window.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-test-osd-window.obj `if test -f 'test-osd-window.c'; then $(CYGPATH_W) 'test-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/test-osd-window.c'; fi`

gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o: gsd-wacom-key-shortcut-button.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po
#	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj: gsd-wacom-key-shortcut-button.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po
#	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`

gsd_test_wacom_osd-gsd-wacom-button-editor.o: gsd-wacom-button-editor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-button-editor.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po
#	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom_osd-gsd-wacom-button-editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

gsd_test_wacom_osd-gsd-wacom-button-editor.obj: gsd-wacom-button-editor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-button-editor.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po
#	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom_osd-gsd-wacom-button-editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`

gsd_test_wacom_osd-gsd-wacom-osd-window.o: gsd-wacom-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po
#	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom_osd-gsd-wacom-osd-window.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

gsd_test_wacom_osd-gsd-wacom-osd-window.obj: gsd-wacom-osd-window.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po
#	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom_osd-gsd-wacom-osd-window.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`

gsd_test_wacom_osd-gsd-wacom-device.o: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom_osd-gsd-wacom-device.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_test_wacom_osd-gsd-wacom-device.obj: gsd-wacom-device.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po
#	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom_osd-gsd-wacom-device.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom_osd-gsd-wacom-resources.o: gsd-wacom-resources.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-resources.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po
#	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom_osd-gsd-wacom-resources.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_test_wacom_osd-gsd-wacom-resources.obj: gsd-wacom-resources.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-resources.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po
#	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom_osd-gsd-wacom-resources.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-pluginDATA: $(plugin_DATA)
	@$(NORMAL_INSTALL)
	@list='$(plugin_DATA)'; test -n "$(plugindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(plugindir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(plugindir)" || exit $$?; \
	done

uninstall-pluginDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(plugin_DATA)'; test -n "$(plugindir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(plugindir)'; $(am__uninstall_files_from_dir)
install-polkit_policyDATA: $(polkit_policy_DATA)
	@$(NORMAL_INSTALL)
	@list='$(polkit_policy_DATA)'; test -n "$(polkit_policydir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(polkit_policydir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(polkit_policydir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(polkit_policydir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(polkit_policydir)" || exit $$?; \
	done

uninstall-polkit_policyDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(polkit_policy_DATA)'; test -n "$(polkit_policydir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(polkit_policydir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(polkit_policydir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libexecPROGRAMS clean-libtool \
	clean-pluginLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-pluginDATA install-pluginLTLIBRARIES \
	install-polkit_policyDATA

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libexecPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libexecPROGRAMS uninstall-pluginDATA \
	uninstall-pluginLTLIBRARIES uninstall-polkit_policyDATA

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libexecPROGRAMS clean-libtool clean-pluginLTLIBRARIES \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libexecPROGRAMS \
	install-man install-pdf install-pdf-am install-pluginDATA \
	install-pluginLTLIBRARIES install-polkit_policyDATA install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-libexecPROGRAMS uninstall-pluginDATA \
	uninstall-pluginLTLIBRARIES uninstall-polkit_policyDATA


org.gnome.settings-daemon.plugins.wacom.policy.in: org.gnome.settings-daemon.plugins.wacom.policy.in.in Makefile
	$(AM_V_GEN) sed -e "s|\@libexecdir\@|$(libexecdir)|" $< > $@

gsd-wacom-resources.c: wacom.gresource.xml tablet-layout.css
	glib-compile-resources 				\
		--target=$@ 				\
		--sourcedir=$(srcdir) 			\
		--generate-source 			\
		--c-name gsd_wacom 			\
		$(srcdir)/wacom.gresource.xml

%.policy:    %.policy.in    $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_V_MERGE)LC_ALL=C $(INTLTOOL_MERGE) $(INTLTOOL_V_MERGE_OPTIONS) -x -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@

@GSD_INTLTOOL_PLUGIN_RULE@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
